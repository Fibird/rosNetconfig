#!/bin/bash
# Shell script scripts to set ROS network configuration on PC side
# ----------------------------------------------------------------
# Copyright(c)2016 Chaoyang Liu <http://chaoyangliu.cc>
# This script is licensed under GNU GPL version 3 or above
# ----------------------------------------------------------------

# Usage info
show_help() {
cat << EOF

Usage: ${0##*/} [-r] [-n HOSTNAME] [-rm]...

Complete ROS net configuration simply and tidily.

      -h            display this help and exit
      -n hostname   set the hostname of ros master
      -r            use remote mode, used to communicate in multiply machines via ros network
      -l            use local mode, not communicating with other machines
      -m            set current computer as ros master
      -d            display current configuration

EOF
}

# Set ros master
set_ros_master() {
  master_uri=$1.local
  sed -i "s/\(^ROS_MASTER_URI=\).*/\1$master_uri/" ./config/rosNetCfg
}

# Set ros ip
set_ros_ip() {
  ip_add=`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'`
  sed -i "s/\(^ROS_IP=\).*/\1$ip_add/" ./config/rosNetCfg
}

display_remote_master_ip() {
  master_ip="`gethostip -d "$1"`"
  echo "The IP address of ros master is: $master_ip"
}
# Set ros hostname
set_ros_hostname() {
  hn=$(hostname).local
  sed -i "s/\(^ROS_HOSTNAME=\).*/\1$hn/" ./config/rosNetCfg
  display_remote_master_ip $hn
}

display_config() {
  echo "The current configuration is: "
  cat ./config/rosNetCfg | while read line
  do
    echo $line
  done
}

getopt --test > /dev/null
if [[ $? -ne 4 ]]
then
  echo "Error:`getopt --test` failed in this environment."
  exit 1
fi

#---------------------------------------------
# d | h | l | m | n | r
# 0 | 1 | 2 | 3 | 4 | 5
#---------------------------------------------

# Options of this tool
SHORT=dfhlmn:r
LONG=force,local,remote,master,display,name:,help

# Use getopt tool to parse options from users
PARSED=$(getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@")
if [[ $? -ne 0 ]]
then
  show_help
  exit 2
fi

eval set -- "$PARSED"

# Init flag as 0
flag=$(expr 0)

# Process the options from users
while true; do
  case "$1" in
    -d|--display)
      flag=$(($flag + 1))
      shift
      ;;
    -h|--help)
      flag=$(($flag + 2))
      shift
      ;;
    -l|--local)
      flag=$(($flag + 2 * 2))
      shift
      ;;
    -m|--master)
      flag=$(($flag + 2 * 2 * 2))
      shift
      ;;
    -r|--remote)
      flag=$(($flag + 2 * 2 * 2 * 2 * 2))
      shift
      ;;
    -n|--name)
      flag=$(($flag + 2 * 2 * 2 * 2))
      name="$2"
      shift 2
      ;;
    --)       # End of all options
      shift
      break
      ;;
    *)
      exit 3
      ;;
  esac
done

case $(expr $flag) in
  1)
  # option:-d
    display_config
    ;;
  2)
  # option:-h
    show_help
    ;;
  4)
  # option:-l
    set_ros_master $(hostname)
    set_ros_ip
    set_ros_hostname
    ;;
  8)
  # option:-m
    set_ros_master $(hostname)
    ;;
  16)
  # option:-n
    set_ros_master $name
    ;;
  32)
  # option:-r
    while true; do
      read -p "Do you wish to set this computer as ros master?" yn
      case $yn in
        [Yy]* )
          set_ros_master $(hostname)
          break
          ;;
        [Nn]* )
          read -p "Please enter the name of ros master: " masterName
          set_ros_master $masterName
          break
          ;;
        * ) echo "Please answer yes or no."
          ;;
      esac
    done
    ;;
  40)
  # options:-rm
    set_ros_master $(hostname)
    set_ros_ip
    set_ros_hostname
    ;;
  48)
  # options:-rn name
    set_ros_master $name
    set_ros_ip
    set_ros_hostname
    ;;
  *)
    ;;
esac

exit 0
